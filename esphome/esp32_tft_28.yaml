substitutions:
  device_name: "testing"
  friendly_name: "testing"
  mqqt_root_topic: "testing"
  mqqt_retain_message: "false"

esphome:
  name: ${device_name}

esp32:
  board: esp32dev
  framework:
    type: arduino

sensor:
  - platform: template
    id: weight_g
    unit_of_measurement: "g"

uart:
 - id: uart_bus1
   tx_pin: GPIO22
   rx_pin: GPIO27
   baud_rate: 4800
   parity: NONE
   debug:
     direction: BOTH
     dummy_receiver: true
     sequence:
        # - lambda: UARTDebug::log_string(direction, bytes);
        - lambda: |-
            std::string str(bytes.begin(), bytes.end());
            //"SUI?     854.21 g  \r\n"

            std::string numberStr;
            bool foundDecimal = false;
            bool foundDigit = false;

            bool is_negative = false;
            for (char c : str) {
                if(c == '-') {
                  is_negative = true;
                }
                if (isdigit(c) || c == '.') {
                    // Append digits and the decimal point to the number string
                    numberStr += c;
                    // If a decimal point is found, mark it
                    if (c == '.') {
                        foundDecimal = true;
                    }
                    foundDigit = true;
                } else if (foundDecimal) {
                    // If a non-digit character is encountered after the decimal point,
                    // break the loop since the number extraction is complete
                    break;
                }
            }

            if (foundDigit) {
                // Convert the extracted string to a double
                double number = stod(numberStr);
                if (is_negative) {
                  number = number * -1;
                }
                id(weight_g).publish_state(number); 
            }


logger:
  level: INFO


spi:
  - id: lcd
    clk_pin: GPIO14
    mosi_pin: GPIO13
    miso_pin: GPIO12
  

output:
  - platform: ledc
    pin: GPIO21
    id: former_led_pin


light:
  - platform: monochromatic
    output: former_led_pin
    name: "Display Backlight"
    id: back_light
    restore_mode: ALWAYS_ON

font:
  - file: "fonts/Consolas/CONSOLA.ttf"
    id: text_font
    size: 26


color:
  - id: my_color
    red: 100%
    green: 0%
    blue: 0%
  

qr_code:
  - id: weight_qr
    value: esphome.io


interval:
  - interval: 0.25s
    then:
      lambda: |-        
        char buffer[50]; sprintf(buffer, "%.2f", id(weight_g).state);
        weight_qr->set_value(std::string(buffer));

        //weight_qr->set_value(std::string(id(weight_g).state));

image:
  - file: "ameralabs_logo.png"
    id: logo
    resize: 200x200


display:
  - platform: ili9xxx
    model: ILI9486
    spi_id: lcd
    dc_pin: 2
    cs_pin: 15
    color_order: rgb
    color_palette: GRAYSCALE
    invert_colors: true
    transform:
      mirror_x: true
      mirror_y: true
    update_interval: 0.5s
    dimensions:
      height: 320
      width: 240
    lambda: |-
  
      it.fill(Color::BLACK);

      if (isnan(id(weight_g).state)) {
        it.image(20, 40, id(logo));
        it.printf(30, 270, id(text_font), id(my_color), "Connecting...");
      } else {
        it.printf(40, 270, id(text_font), id(my_color), "%8.2f g", id(weight_g).state);
         it.qr_code(30, 40, id(weight_qr), id(my_color), 8);
      }

     

    
